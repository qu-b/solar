from sqlalchemy import func
from geoalchemy2.functions import ST_DWithin, ST_SetSRID, ST_MakePoint
from solardata import SolkatChDach
import json


def fetch_polygons(db_session, latitude, longitude, distance_in_meters=100):
    """
    Fetch polygons for the given latitude and longitude.
    """
    transformed_point = func.ST_Transform(
        ST_SetSRID(ST_MakePoint(longitude, latitude), 4326),  # WGS 84
        2056  # Swiss coordinate system
    )

    query = (db_session.query(
        func.ST_AsGeoJSON(func.ST_Transform(
            SolkatChDach.geom, 4326)),  # Transform to WGS84
        SolkatChDach.stromertrag)
        .filter(ST_DWithin(SolkatChDach.geom, transformed_point, distance_in_meters))
    )

    results = query.all()
    geojson_data = []
    for row in results:
        geom_geojson = json.loads(row[0])
        geojson_data.append({
            "type": "Feature",
            "properties": {"stromertrag": row[1]},
            "geometry": geom_geojson
        })
    return geojson_data


def get_highest_yield_polygon(polygons):
    """
    Get the polygon with the highest energy yield (stromertrag).
    """
    if not polygons:
        return None

    highest_yield_polygon = max(
        polygons, key=lambda x: x['properties']['stromertrag'])
    return highest_yield_polygon


def calculate_money_worth(polygon, energy_price_per_kwh):
    """
    Calculate the monetary worth of the energy that can be generated by the polygon.
    """
    if not polygon:
        return 0

    # Energy yield in kWh/year
    stromertrag = polygon['properties']['stromertrag']
    money_worth = stromertrag * energy_price_per_kwh  # in currency/year
    return money_worth


def filter_polygons_by_attribute(polygons, attribute, value):
    """
    Filter polygons by a given attribute and value.
    """
    filtered_polygons = [
        polygon for polygon in polygons if polygon['properties'].get(attribute) == value]
    return filtered_polygons


def update_selected_polygon(selected_polygon_id, polygons):
    """
    Update the currently selected polygon based on its ID.
    """
    selected_polygon = next((polygon for polygon in polygons if polygon['properties'].get(
        'ID') == selected_polygon_id), None)
    return selected_polygon


def get_polygon_details(polygon):
    """
    Get detailed information about a polygon.
    """
    if not polygon:
        return {}

    return polygon['properties']
